// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hook

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HookClient is the client API for Hook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HookClient interface {
	BuildBranch(ctx context.Context, in *BuildBranchReq, opts ...grpc.CallOption) (*BuildBranchResp, error)
	Deploy(ctx context.Context, in *DeployReq, opts ...grpc.CallOption) (*DeployResp, error)
	CleanBranches(ctx context.Context, in *CleanBranchesReq, opts ...grpc.CallOption) (*EmptyMsg, error)
}

type hookClient struct {
	cc grpc.ClientConnInterface
}

func NewHookClient(cc grpc.ClientConnInterface) HookClient {
	return &hookClient{cc}
}

func (c *hookClient) BuildBranch(ctx context.Context, in *BuildBranchReq, opts ...grpc.CallOption) (*BuildBranchResp, error) {
	out := new(BuildBranchResp)
	err := c.cc.Invoke(ctx, "/hook.Hook/BuildBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookClient) Deploy(ctx context.Context, in *DeployReq, opts ...grpc.CallOption) (*DeployResp, error) {
	out := new(DeployResp)
	err := c.cc.Invoke(ctx, "/hook.Hook/Deploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookClient) CleanBranches(ctx context.Context, in *CleanBranchesReq, opts ...grpc.CallOption) (*EmptyMsg, error) {
	out := new(EmptyMsg)
	err := c.cc.Invoke(ctx, "/hook.Hook/CleanBranches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HookServer is the server API for Hook service.
// All implementations must embed UnimplementedHookServer
// for forward compatibility
type HookServer interface {
	BuildBranch(context.Context, *BuildBranchReq) (*BuildBranchResp, error)
	Deploy(context.Context, *DeployReq) (*DeployResp, error)
	CleanBranches(context.Context, *CleanBranchesReq) (*EmptyMsg, error)
	mustEmbedUnimplementedHookServer()
}

// UnimplementedHookServer must be embedded to have forward compatible implementations.
type UnimplementedHookServer struct {
}

func (UnimplementedHookServer) BuildBranch(context.Context, *BuildBranchReq) (*BuildBranchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildBranch not implemented")
}
func (UnimplementedHookServer) Deploy(context.Context, *DeployReq) (*DeployResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (UnimplementedHookServer) CleanBranches(context.Context, *CleanBranchesReq) (*EmptyMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanBranches not implemented")
}
func (UnimplementedHookServer) mustEmbedUnimplementedHookServer() {}

// UnsafeHookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HookServer will
// result in compilation errors.
type UnsafeHookServer interface {
	mustEmbedUnimplementedHookServer()
}

func RegisterHookServer(s grpc.ServiceRegistrar, srv HookServer) {
	s.RegisterService(&Hook_ServiceDesc, srv)
}

func _Hook_BuildBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildBranchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServer).BuildBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hook.Hook/BuildBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServer).BuildBranch(ctx, req.(*BuildBranchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hook_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hook.Hook/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServer).Deploy(ctx, req.(*DeployReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hook_CleanBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanBranchesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServer).CleanBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hook.Hook/CleanBranches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServer).CleanBranches(ctx, req.(*CleanBranchesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Hook_ServiceDesc is the grpc.ServiceDesc for Hook service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hook_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hook.Hook",
	HandlerType: (*HookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildBranch",
			Handler:    _Hook_BuildBranch_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _Hook_Deploy_Handler,
		},
		{
			MethodName: "CleanBranches",
			Handler:    _Hook_CleanBranches_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hook.proto",
}
