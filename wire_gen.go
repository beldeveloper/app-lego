// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/beldeveloper/app-lego/controller"
	"github.com/beldeveloper/app-lego/service/branch"
	"github.com/beldeveloper/app-lego/service/builder"
	"github.com/beldeveloper/app-lego/service/deployer"
	"github.com/beldeveloper/app-lego/service/deployment"
	"github.com/beldeveloper/app-lego/service/marshaller"
	"github.com/beldeveloper/app-lego/service/os"
	"github.com/beldeveloper/app-lego/service/repository"
	"github.com/beldeveloper/app-lego/service/validation"
	"github.com/beldeveloper/app-lego/service/variable"
	"github.com/beldeveloper/app-lego/service/vcs"
)

// Injectors from wire.go:

func InitializeController() (controller.Service, error) {
	pool, err := postgresConn()
	if err != nil {
		return nil, err
	}
	pgSchema := postgresSchema()
	service := repository.NewPostgres(pool, pgSchema)
	filePath := workDir()
	branchService := branch.NewPostgres(pool, pgSchema, filePath)
	deploymentService := deployment.NewPostgres(pool, pgSchema)
	osService := os.NewOS()
	marshallerService := marshaller.NewYaml()
	variableService := variable.NewVariable(marshallerService, service, filePath)
	vcsService := vcs.NewGit(filePath, osService)
	builderService := builder.NewBuilder(filePath, vcsService, osService, service, branchService, variableService, marshallerService)
	deployerService := deployer.NewDeployer(service, branchService, deploymentService, osService, variableService, marshallerService, filePath)
	validationService := validation.NewValidation()
	controllerService := controller.NewController(service, branchService, deploymentService, builderService, deployerService, validationService, vcsService)
	return controllerService, nil
}
